// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get invariant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CommitNewAdmin extends ethereum.Event {
  get params(): CommitNewAdmin__Params {
    return new CommitNewAdmin__Params(this);
  }
}

export class CommitNewAdmin__Params {
  _event: CommitNewAdmin;

  constructor(event: CommitNewAdmin) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CommitNewFee extends ethereum.Event {
  get params(): CommitNewFee__Params {
    return new CommitNewFee__Params(this);
  }
}

export class CommitNewFee__Params {
  _event: CommitNewFee;

  constructor(event: CommitNewFee) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewFee extends ethereum.Event {
  get params(): NewFee__Params {
    return new NewFee__Params(this);
  }
}

export class NewFee__Params {
  _event: NewFee;

  constructor(event: NewFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RampA extends ethereum.Event {
  get params(): RampA__Params {
    return new RampA__Params(this);
  }
}

export class RampA__Params {
  _event: RampA;

  constructor(event: RampA) {
    this._event = event;
  }

  get old_A(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get new_A(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get initial_time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get future_time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get token_supply(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveLiquidityImbalance extends ethereum.Event {
  get params(): RemoveLiquidityImbalance__Params {
    return new RemoveLiquidityImbalance__Params(this);
  }
}

export class RemoveLiquidityImbalance__Params {
  _event: RemoveLiquidityImbalance;

  constructor(event: RemoveLiquidityImbalance) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get invariant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveLiquidityOne extends ethereum.Event {
  get params(): RemoveLiquidityOne__Params {
    return new RemoveLiquidityOne__Params(this);
  }
}

export class RemoveLiquidityOne__Params {
  _event: RemoveLiquidityOne;

  constructor(event: RemoveLiquidityOne) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get coin_amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StopRampA extends ethereum.Event {
  get params(): StopRampA__Params {
    return new StopRampA__Params(this);
  }
}

export class StopRampA__Params {
  _event: StopRampA;

  constructor(event: StopRampA) {
    this._event = event;
  }

  get A(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get t(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenExchange extends ethereum.Event {
  get params(): TokenExchange__Params {
    return new TokenExchange__Params(this);
  }
}

export class TokenExchange__Params {
  _event: TokenExchange;

  constructor(event: TokenExchange) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sold_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens_sold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bought_id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokens_bought(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BStablePool extends ethereum.SmartContract {
  static bind(address: Address): BStablePool {
    return new BStablePool("BStablePool", address);
  }

  admin_actions_deadline(): BigInt {
    let result = super.call(
      "admin_actions_deadline",
      "admin_actions_deadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_admin_actions_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "admin_actions_deadline",
      "admin_actions_deadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin_fee(): BigInt {
    let result = super.call("admin_fee", "admin_fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_admin_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("admin_fee", "admin_fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: BigInt): BigInt {
    let result = super.call("balances", "balances(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coins(param0: BigInt): Address {
    let result = super.call("coins", "coins(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_coins(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("coins", "coins(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_A(): BigInt {
    let result = super.call("future_A", "future_A():(uint256)", []);

    return result[0].toBigInt();
  }

  try_future_A(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("future_A", "future_A():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_A_time(): BigInt {
    let result = super.call("future_A_time", "future_A_time():(uint256)", []);

    return result[0].toBigInt();
  }

  try_future_A_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_A_time",
      "future_A_time():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_admin_fee(): BigInt {
    let result = super.call(
      "future_admin_fee",
      "future_admin_fee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_future_admin_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_admin_fee",
      "future_admin_fee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_fee(): BigInt {
    let result = super.call("future_fee", "future_fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_future_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("future_fee", "future_fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_owner(): Address {
    let result = super.call("future_owner", "future_owner():(address)", []);

    return result[0].toAddress();
  }

  try_future_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("future_owner", "future_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initial_A(): BigInt {
    let result = super.call("initial_A", "initial_A():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initial_A(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initial_A", "initial_A():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initial_A_time(): BigInt {
    let result = super.call("initial_A_time", "initial_A_time():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initial_A_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initial_A_time",
      "initial_A_time():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  is_killed(): boolean {
    let result = super.call("is_killed", "is_killed():(bool)", []);

    return result[0].toBoolean();
  }

  try_is_killed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_killed", "is_killed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kill_deadline(): BigInt {
    let result = super.call("kill_deadline", "kill_deadline():(uint256)", []);

    return result[0].toBigInt();
  }

  try_kill_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kill_deadline",
      "kill_deadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer_ownership_deadline(): BigInt {
    let result = super.call(
      "transfer_ownership_deadline",
      "transfer_ownership_deadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transfer_ownership_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transfer_ownership_deadline",
      "transfer_ownership_deadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volume(): BigInt {
    let result = super.call("volume", "volume():(uint256)", []);

    return result[0].toBigInt();
  }

  try_volume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("volume", "volume():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  A(): BigInt {
    let result = super.call("A", "A():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("A", "A():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_virtual_price(): BigInt {
    let result = super.call(
      "get_virtual_price",
      "get_virtual_price():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_get_virtual_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_virtual_price",
      "get_virtual_price():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calc_token_amount(amounts: Array<BigInt>, deposit: boolean): BigInt {
    let result = super.call(
      "calc_token_amount",
      "calc_token_amount(uint256[],bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(deposit)
      ]
    );

    return result[0].toBigInt();
  }

  try_calc_token_amount(
    amounts: Array<BigInt>,
    deposit: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calc_token_amount",
      "calc_token_amount(uint256[],bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(deposit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_dy(i: BigInt, j: BigInt, dx: BigInt): BigInt {
    let result = super.call(
      "get_dy",
      "get_dy(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(i),
        ethereum.Value.fromUnsignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );

    return result[0].toBigInt();
  }

  try_get_dy(i: BigInt, j: BigInt, dx: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_dy",
      "get_dy(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(i),
        ethereum.Value.fromUnsignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_dy_underlying(i: BigInt, j: BigInt, dx: BigInt): BigInt {
    let result = super.call(
      "get_dy_underlying",
      "get_dy_underlying(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(i),
        ethereum.Value.fromUnsignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );

    return result[0].toBigInt();
  }

  try_get_dy_underlying(
    i: BigInt,
    j: BigInt,
    dx: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_dy_underlying",
      "get_dy_underlying(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(i),
        ethereum.Value.fromUnsignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calc_withdraw_one_coin(_token_amount: BigInt, i: BigInt): BigInt {
    let result = super.call(
      "calc_withdraw_one_coin",
      "calc_withdraw_one_coin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_token_amount),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_calc_withdraw_one_coin(
    _token_amount: BigInt,
    i: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calc_withdraw_one_coin",
      "calc_withdraw_one_coin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_token_amount),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin_balances(i: BigInt): BigInt {
    let result = super.call(
      "admin_balances",
      "admin_balances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(i)]
    );

    return result[0].toBigInt();
  }

  try_admin_balances(i: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "admin_balances",
      "admin_balances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(i)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _coins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _A(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _admin_fee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get ownerAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class Add_liquidityCall extends ethereum.Call {
  get inputs(): Add_liquidityCall__Inputs {
    return new Add_liquidityCall__Inputs(this);
  }

  get outputs(): Add_liquidityCall__Outputs {
    return new Add_liquidityCall__Outputs(this);
  }
}

export class Add_liquidityCall__Inputs {
  _call: Add_liquidityCall;

  constructor(call: Add_liquidityCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get min_mint_amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Add_liquidityCall__Outputs {
  _call: Add_liquidityCall;

  constructor(call: Add_liquidityCall) {
    this._call = call;
  }
}

export class ExchangeCall extends ethereum.Call {
  get inputs(): ExchangeCall__Inputs {
    return new ExchangeCall__Inputs(this);
  }

  get outputs(): ExchangeCall__Outputs {
    return new ExchangeCall__Outputs(this);
  }
}

export class ExchangeCall__Inputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }

  get i(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get j(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get min_dy(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ExchangeCall__Outputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }
}

export class Remove_liquidityCall extends ethereum.Call {
  get inputs(): Remove_liquidityCall__Inputs {
    return new Remove_liquidityCall__Inputs(this);
  }

  get outputs(): Remove_liquidityCall__Outputs {
    return new Remove_liquidityCall__Outputs(this);
  }
}

export class Remove_liquidityCall__Inputs {
  _call: Remove_liquidityCall;

  constructor(call: Remove_liquidityCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get min_amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class Remove_liquidityCall__Outputs {
  _call: Remove_liquidityCall;

  constructor(call: Remove_liquidityCall) {
    this._call = call;
  }
}

export class Remove_liquidity_imbalanceCall extends ethereum.Call {
  get inputs(): Remove_liquidity_imbalanceCall__Inputs {
    return new Remove_liquidity_imbalanceCall__Inputs(this);
  }

  get outputs(): Remove_liquidity_imbalanceCall__Outputs {
    return new Remove_liquidity_imbalanceCall__Outputs(this);
  }
}

export class Remove_liquidity_imbalanceCall__Inputs {
  _call: Remove_liquidity_imbalanceCall;

  constructor(call: Remove_liquidity_imbalanceCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get max_burn_amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Remove_liquidity_imbalanceCall__Outputs {
  _call: Remove_liquidity_imbalanceCall;

  constructor(call: Remove_liquidity_imbalanceCall) {
    this._call = call;
  }
}

export class Remove_liquidity_one_coinCall extends ethereum.Call {
  get inputs(): Remove_liquidity_one_coinCall__Inputs {
    return new Remove_liquidity_one_coinCall__Inputs(this);
  }

  get outputs(): Remove_liquidity_one_coinCall__Outputs {
    return new Remove_liquidity_one_coinCall__Outputs(this);
  }
}

export class Remove_liquidity_one_coinCall__Inputs {
  _call: Remove_liquidity_one_coinCall;

  constructor(call: Remove_liquidity_one_coinCall) {
    this._call = call;
  }

  get _token_amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get i(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get min_amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Remove_liquidity_one_coinCall__Outputs {
  _call: Remove_liquidity_one_coinCall;

  constructor(call: Remove_liquidity_one_coinCall) {
    this._call = call;
  }
}

export class Ramp_ACall extends ethereum.Call {
  get inputs(): Ramp_ACall__Inputs {
    return new Ramp_ACall__Inputs(this);
  }

  get outputs(): Ramp_ACall__Outputs {
    return new Ramp_ACall__Outputs(this);
  }
}

export class Ramp_ACall__Inputs {
  _call: Ramp_ACall;

  constructor(call: Ramp_ACall) {
    this._call = call;
  }

  get _future_A(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _future_time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Ramp_ACall__Outputs {
  _call: Ramp_ACall;

  constructor(call: Ramp_ACall) {
    this._call = call;
  }
}

export class Stop_ramp_ACall extends ethereum.Call {
  get inputs(): Stop_ramp_ACall__Inputs {
    return new Stop_ramp_ACall__Inputs(this);
  }

  get outputs(): Stop_ramp_ACall__Outputs {
    return new Stop_ramp_ACall__Outputs(this);
  }
}

export class Stop_ramp_ACall__Inputs {
  _call: Stop_ramp_ACall;

  constructor(call: Stop_ramp_ACall) {
    this._call = call;
  }
}

export class Stop_ramp_ACall__Outputs {
  _call: Stop_ramp_ACall;

  constructor(call: Stop_ramp_ACall) {
    this._call = call;
  }
}

export class Commit_new_feeCall extends ethereum.Call {
  get inputs(): Commit_new_feeCall__Inputs {
    return new Commit_new_feeCall__Inputs(this);
  }

  get outputs(): Commit_new_feeCall__Outputs {
    return new Commit_new_feeCall__Outputs(this);
  }
}

export class Commit_new_feeCall__Inputs {
  _call: Commit_new_feeCall;

  constructor(call: Commit_new_feeCall) {
    this._call = call;
  }

  get new_fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get new_admin_fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Commit_new_feeCall__Outputs {
  _call: Commit_new_feeCall;

  constructor(call: Commit_new_feeCall) {
    this._call = call;
  }
}

export class Apply_new_feeCall extends ethereum.Call {
  get inputs(): Apply_new_feeCall__Inputs {
    return new Apply_new_feeCall__Inputs(this);
  }

  get outputs(): Apply_new_feeCall__Outputs {
    return new Apply_new_feeCall__Outputs(this);
  }
}

export class Apply_new_feeCall__Inputs {
  _call: Apply_new_feeCall;

  constructor(call: Apply_new_feeCall) {
    this._call = call;
  }
}

export class Apply_new_feeCall__Outputs {
  _call: Apply_new_feeCall;

  constructor(call: Apply_new_feeCall) {
    this._call = call;
  }
}

export class Revert_new_parametersCall extends ethereum.Call {
  get inputs(): Revert_new_parametersCall__Inputs {
    return new Revert_new_parametersCall__Inputs(this);
  }

  get outputs(): Revert_new_parametersCall__Outputs {
    return new Revert_new_parametersCall__Outputs(this);
  }
}

export class Revert_new_parametersCall__Inputs {
  _call: Revert_new_parametersCall;

  constructor(call: Revert_new_parametersCall) {
    this._call = call;
  }
}

export class Revert_new_parametersCall__Outputs {
  _call: Revert_new_parametersCall;

  constructor(call: Revert_new_parametersCall) {
    this._call = call;
  }
}

export class Revert_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Revert_transfer_ownershipCall__Inputs {
    return new Revert_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Revert_transfer_ownershipCall__Outputs {
    return new Revert_transfer_ownershipCall__Outputs(this);
  }
}

export class Revert_transfer_ownershipCall__Inputs {
  _call: Revert_transfer_ownershipCall;

  constructor(call: Revert_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Revert_transfer_ownershipCall__Outputs {
  _call: Revert_transfer_ownershipCall;

  constructor(call: Revert_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Withdraw_admin_feesCall extends ethereum.Call {
  get inputs(): Withdraw_admin_feesCall__Inputs {
    return new Withdraw_admin_feesCall__Inputs(this);
  }

  get outputs(): Withdraw_admin_feesCall__Outputs {
    return new Withdraw_admin_feesCall__Outputs(this);
  }
}

export class Withdraw_admin_feesCall__Inputs {
  _call: Withdraw_admin_feesCall;

  constructor(call: Withdraw_admin_feesCall) {
    this._call = call;
  }
}

export class Withdraw_admin_feesCall__Outputs {
  _call: Withdraw_admin_feesCall;

  constructor(call: Withdraw_admin_feesCall) {
    this._call = call;
  }
}

export class Donate_admin_feesCall extends ethereum.Call {
  get inputs(): Donate_admin_feesCall__Inputs {
    return new Donate_admin_feesCall__Inputs(this);
  }

  get outputs(): Donate_admin_feesCall__Outputs {
    return new Donate_admin_feesCall__Outputs(this);
  }
}

export class Donate_admin_feesCall__Inputs {
  _call: Donate_admin_feesCall;

  constructor(call: Donate_admin_feesCall) {
    this._call = call;
  }
}

export class Donate_admin_feesCall__Outputs {
  _call: Donate_admin_feesCall;

  constructor(call: Donate_admin_feesCall) {
    this._call = call;
  }
}

export class Kill_meCall extends ethereum.Call {
  get inputs(): Kill_meCall__Inputs {
    return new Kill_meCall__Inputs(this);
  }

  get outputs(): Kill_meCall__Outputs {
    return new Kill_meCall__Outputs(this);
  }
}

export class Kill_meCall__Inputs {
  _call: Kill_meCall;

  constructor(call: Kill_meCall) {
    this._call = call;
  }
}

export class Kill_meCall__Outputs {
  _call: Kill_meCall;

  constructor(call: Kill_meCall) {
    this._call = call;
  }
}

export class Unkill_meCall extends ethereum.Call {
  get inputs(): Unkill_meCall__Inputs {
    return new Unkill_meCall__Inputs(this);
  }

  get outputs(): Unkill_meCall__Outputs {
    return new Unkill_meCall__Outputs(this);
  }
}

export class Unkill_meCall__Inputs {
  _call: Unkill_meCall;

  constructor(call: Unkill_meCall) {
    this._call = call;
  }
}

export class Unkill_meCall__Outputs {
  _call: Unkill_meCall;

  constructor(call: Unkill_meCall) {
    this._call = call;
  }
}
