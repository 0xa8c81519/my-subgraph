// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Volume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Volume entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Volume entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Volume", id.toString(), this);
  }

  static load(id: string): Volume | null {
    return store.get("Volume", id) as Volume | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): i32 {
    let value = this.get("poolId");
    return value.toI32();
  }

  set poolId(value: i32) {
    this.set("poolId", Value.fromI32(value));
  }

  get volume(): BigInt | null {
    let value = this.get("volume");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt | null) {
    if (value === null) {
      this.unset("volume");
    } else {
      this.set("volume", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Liquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Liquidity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Liquidity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Liquidity", id.toString(), this);
  }

  static load(id: string): Liquidity | null {
    return store.get("Liquidity", id) as Liquidity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): i32 {
    let value = this.get("poolId");
    return value.toI32();
  }

  set poolId(value: i32) {
    this.set("poolId", Value.fromI32(value));
  }

  get liquidity(): BigInt | null {
    let value = this.get("liquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidity");
    } else {
      this.set("liquidity", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}
